(
game
 
"Nightrider" 
(
players
 
1
) 
(
equipment
 
{
(
board
 
(
square
 
15
)
) 
 
(
piece
 
"Knight" 
Each 
(
if
 
(
=
 
(
var
 
"Rotation"
) 
0
) 
(
or
 
{
(
move
 
Leap 
(
from
) 
{
{
F 
 
F 
 
R 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
1
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
) 
 
(
move
 
Leap 
(
from
) 
{
{
F 
 
R 
 
F 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
1
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
1
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
) 
 
(
move
 
Leap 
(
from
) 
{
{
R 
 
F 
 
F 
 
R 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
2
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
2
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
) 
 
(
move
 
Leap 
(
from
) 
{
{
R 
 
F 
 
R 
 
F 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
1
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
5
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
) 
 
(
move
 
Leap 
(
from
) 
{
{
L 
 
F 
 
L 
 
F 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
2
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
3
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
) 
 
(
move
 
Leap 
(
from
) 
{
{
L 
 
F 
 
F 
 
L 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
1
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
5
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
) 
 
(
move
 
Leap 
(
from
) 
{
{
F 
 
L 
 
F 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
2
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
6
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
) 
 
(
move
 
Leap 
(
from
) 
{
{
F 
 
F 
 
L 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
0
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
10
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
}
) 
(
or
 
{
(
if
 
(
=
 
(
var
 
"Rotation"
) 
0
) 
(
move
 
Leap 
(
from
 
(
last
 
To
)
) 
{
{
F 
 
F 
 
R 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
2
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
(
var
 
"Rotation"
)
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
) 
 
(
if
 
(
=
 
(
var
 
"Rotation"
) 
1
) 
(
move
 
Leap 
(
from
 
(
last
 
To
)
) 
{
{
F 
 
R 
 
F 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
1
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
(
var
 
"Rotation"
)
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
) 
 
(
if
 
(
=
 
(
var
 
"Rotation"
) 
1
) 
(
move
 
Leap 
(
from
 
(
last
 
To
)
) 
{
{
R 
 
F 
 
F 
 
R 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
0
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
(
var
 
"Rotation"
)
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
) 
 
(
if
 
(
=
 
(
var
 
"Rotation"
) 
1
) 
(
move
 
Leap 
(
from
 
(
last
 
To
)
) 
{
{
R 
 
F 
 
R 
 
F 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
2
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
(
var
 
"Rotation"
)
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
) 
 
(
if
 
(
=
 
(
var
 
"Rotation"
) 
6
) 
(
move
 
Leap 
(
from
 
(
last
 
To
)
) 
{
{
L 
 
F 
 
L 
 
F 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
1
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
(
var
 
"Rotation"
)
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
) 
 
(
if
 
(
=
 
(
var
 
"Rotation"
) 
8
) 
(
move
 
Leap 
(
from
 
(
last
 
To
)
) 
{
{
L 
 
F 
 
F 
 
L 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
0
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
(
var
 
"Rotation"
)
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
) 
 
(
if
 
(
=
 
(
var
 
"Rotation"
) 
5
) 
(
move
 
Leap 
(
from
 
(
last
 
To
)
) 
{
{
F 
 
L 
 
F 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
1
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
(
var
 
"Rotation"
)
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
) 
 
(
if
 
(
=
 
(
var
 
"Rotation"
) 
11
) 
(
move
 
Leap 
(
from
 
(
last
 
To
)
) 
{
{
F 
 
F 
 
L 
 
F
}
} 
rotations:
false 
(
to
 
if:
(
not
 
(
is
 
Friend 
(
who
 
at:
(
to
)
)
)
) 
(
apply
 
(
if
 
(
is
 
Enemy 
(
who
 
at:
(
to
)
)
) 
(
remove
 
(
to
) 
(
then
 
(
set
 
Var 
"Captured" 
2
)
)
)
)
)
) 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
(
var
 
"Rotation"
)
) 
 
(
if
 
(
=
 
(
var
 
"Captured"
) 
0
) 
(
moveAgain
) 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
}
)
)
)
) 
 
(
move
 
Pass 
(
then
 
(
seq
 
{
(
set
 
Var 
"Rotation" 
0
) 
 
(
set
 
Var 
"Captured" 
0
)
}
)
)
)
}
)
)
)
}
) 
(
rules
 
(
start
 
{
(
place
 
Random 
{
"Knight1"
} 
count:
6
) 
 
(
place
 
Random 
{
"Knight2"
} 
count:
14
)
}
) 
(
play
 
(
forEach
 
Piece
)
) 
(
end
 
{
(
if
 
(
no
 
Moves 
Next
) 
(
result
 
Mover 
Win
)
)
}
)
)
) 
